
#if statement
def p_statement_ida(p):
     '''statement : IDA  9AWSLISSER comparaison 9AWSLIMEN '{' expression '}'  
     '''
     if(p[3]):
          p[0]=p[6]
#while statement
def p_statement_baynama(p):
     'statement : BAYNAMA 9AWSLISSER comparaison 9AWSLIMEN expression'
     while(p[3]):
          
          p[0]=p[5]
# comparaison
def p_comparaison(p):
     '''comparaison : expression KBER expression 
                    | expression SGHER expression
                    | expression TOSSAWI expression
     '''
     if(p[2]=='>'):
          p[0]=p[1]>p[3]
     if(p[2]=='<'):
          p[0]=p[1]<p[3]
     if(p[2]=='=='):
          p[0]=p[1]==p[3]

def p_statement(p):
     '''  statement : expression   '''
     p[0]=p[1]

def p_statement_kteb(p):
     ''' statement : KTEB 9AWSLISSER expression 9AWSLIMEN   '''
     p[0]=p[3]

def p_statement_affect(p):
     'statement : MOTAGHAYIR AFFECT expression'
     p[0]=p[3]
     names[p[1]] =p[3]  
    

def p_expression_motaghayir(p):
    'expression : MOTAGHAYIR'
    # attempt to lookup variable in current dictionary, throw error if not found
    try:
        p[0] = names[p[1]]
    except LookupError:
        print("variable makynch '%s'" % p[1])
        p[0] = 0




def p_expression_za2id(p):
     'expression : expression ZA2ID term'
     p[0] = p[1] + p[3]
 
def p_expression_na9is(p):
     'expression : expression NA9IS term'
     p[0] = p[1] - p[3]
 
def p_expression_term(p):
     '''expression : term'''
     p[0] = p[1]

 
def p_term_derb(p):
     'term : term DERB factor'
     p[0] = p[1] * p[3]
 
def p_term_9isma(p):
     'term : term 9ISMA factor'
     p[0] = p[1] / p[3]
 
def p_term_factor(p):
     '''term : factor
               
     '''
     
     p[0] = p[1]
 
def p_factor_3adad(p):
     '''factor : 3ADAD'''
     
     p[0] = p[1]

 
def p_factor_expr(p):
     'factor : 9AWSLISSER expression 9AWSLIMEN'
     p[0] = p[2]

 
# Error rule for syntax errors
def p_error(p):
     print("khata2 f syntax!")

def p_empty(p):
     'empty :  '
     pass 


precedence = (('nonassoc', 'KBER', 'SGHER'),
     ('left', 'ZA2ID', 'NA9IS'),
     ('left', 'DERB', '9ISMA'),
     ('right', 'UMINUS'),            # Unary minus operator
 )

def p_expr_uminus(p):
     'expression : NA9IS expression %prec UMINUS'
     p[0] = -p[2]


'''
while True:
 data= input("compiler >")
 lexer.input(data)
 

 for tok in lexer:
     print(tok)'''


 # Build the parser
parser = yacc.yacc(debug=True)
 
while True:
    try:
        s = input('parser>')
    except EOFError:
        break
    if not s: continue
    result = parser.parse(s)
    print(result)




# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocKBERSGHERleftZA2IDNA9ISleftDERB9ISMArightUMINUS3ADAD 9AWSLIMEN 9AWSLISSER 9ISMA AFFECT ALORS AW BAYNAMA DERB DIR IDA KBER KHROJ KLMA KTEB MA39OFALIMN MA39OFALISSER MINAJL MOTAGHAYIR NA9IS SCAN SGHER TABITA TOKHALIF TOSSAWI W WLA ZA2IDstatement : IDA  9AWSLISSER comparaison 9AWSLIMEN '{' expression '}'  \n     statement : BAYNAMA 9AWSLISSER comparaison 9AWSLIMEN expressioncomparaison : expression KBER expression \n                    | expression SGHER expression\n                    | expression TOSSAWI expression\n                    | expression TOKHALIF expression\n       statement : expression    statement : KTEB 9AWSLISSER expression 9AWSLIMEN   statement : MOTAGHAYIR AFFECT expressionexpression : MOTAGHAYIRexpression : expression ZA2ID termexpression : expression NA9IS termexpression : termterm : term DERB factorterm : term 9ISMA factorterm : factor\n               \n     factor : 3ADADfactor : 9AWSLISSER expression 9AWSLIMENempty :  expression : NA9IS expression %prec UMINUS"
    
_lr_action_items = {'IDA':([0,],[2,]),'BAYNAMA':([0,],[5,]),'KTEB':([0,],[6,]),'MOTAGHAYIR':([0,3,9,12,17,18,19,34,35,36,37,38,40,],[7,14,14,14,14,14,14,14,14,14,14,14,14,]),'NA9IS':([0,3,4,7,8,9,10,11,12,13,14,17,18,19,22,24,25,26,27,29,30,31,32,34,35,36,37,38,40,41,42,43,44,45,46,],[9,9,16,-10,-13,9,-16,-17,9,16,-10,9,9,9,-20,16,-18,-11,-12,16,16,-14,-15,9,9,9,9,9,9,16,16,16,16,16,16,]),'3ADAD':([0,3,9,12,15,16,17,18,19,20,21,34,35,36,37,38,40,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'9AWSLISSER':([0,2,3,5,6,9,12,15,16,17,18,19,20,21,34,35,36,37,38,40,],[3,12,3,17,18,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'$end':([1,4,7,8,10,11,14,22,25,26,27,30,31,32,39,45,47,],[0,-7,-10,-13,-16,-17,-10,-20,-18,-11,-12,-9,-14,-15,-8,-2,-1,]),'ZA2ID':([4,7,8,10,11,13,14,22,24,25,26,27,29,30,31,32,41,42,43,44,45,46,],[15,-10,-13,-16,-17,15,-10,-20,15,-18,-11,-12,15,15,-14,-15,15,15,15,15,15,15,]),'AFFECT':([7,],[19,]),'9AWSLIMEN':([8,10,11,13,14,22,23,25,26,27,28,29,31,32,41,42,43,44,],[-13,-16,-17,25,-10,-20,33,-18,-11,-12,38,39,-14,-15,-3,-4,-5,-6,]),'KBER':([8,10,11,14,22,24,25,26,27,31,32,],[-13,-16,-17,-10,-20,34,-18,-11,-12,-14,-15,]),'SGHER':([8,10,11,14,22,24,25,26,27,31,32,],[-13,-16,-17,-10,-20,35,-18,-11,-12,-14,-15,]),'TOSSAWI':([8,10,11,14,22,24,25,26,27,31,32,],[-13,-16,-17,-10,-20,36,-18,-11,-12,-14,-15,]),'TOKHALIF':([8,10,11,14,22,24,25,26,27,31,32,],[-13,-16,-17,-10,-20,37,-18,-11,-12,-14,-15,]),'}':([8,10,11,14,22,25,26,27,31,32,46,],[-13,-16,-17,-10,-20,-18,-11,-12,-14,-15,47,]),'DERB':([8,10,11,25,26,27,31,32,],[20,-16,-17,-18,20,20,-14,-15,]),'9ISMA':([8,10,11,25,26,27,31,32,],[21,-16,-17,-18,21,21,-14,-15,]),'{':([33,],[40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,3,9,12,17,18,19,34,35,36,37,38,40,],[4,13,22,24,24,29,30,41,42,43,44,45,46,]),'term':([0,3,9,12,15,16,17,18,19,34,35,36,37,38,40,],[8,8,8,8,26,27,8,8,8,8,8,8,8,8,8,]),'factor':([0,3,9,12,15,16,17,18,19,20,21,34,35,36,37,38,40,],[10,10,10,10,10,10,10,10,10,31,32,10,10,10,10,10,10,]),'comparaison':([12,17,],[23,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> IDA 9AWSLISSER comparaison 9AWSLIMEN { expression }','statement',7,'p_statement_ida','calclex.py',91),
  ('statement -> BAYNAMA 9AWSLISSER comparaison 9AWSLIMEN expression','statement',5,'p_statement_baynama','calclex.py',97),
  ('comparaison -> expression KBER expression','comparaison',3,'p_comparaison','calclex.py',103),
  ('comparaison -> expression SGHER expression','comparaison',3,'p_comparaison','calclex.py',104),
  ('comparaison -> expression TOSSAWI expression','comparaison',3,'p_comparaison','calclex.py',105),
  ('comparaison -> expression TOKHALIF expression','comparaison',3,'p_comparaison','calclex.py',106),
  ('statement -> expression','statement',1,'p_statement','calclex.py',119),
  ('statement -> KTEB 9AWSLISSER expression 9AWSLIMEN','statement',4,'p_statement_kteb','calclex.py',123),
  ('statement -> MOTAGHAYIR AFFECT expression','statement',3,'p_statement_affect','calclex.py',127),
  ('expression -> MOTAGHAYIR','expression',1,'p_expression_motaghayir','calclex.py',133),
  ('expression -> expression ZA2ID term','expression',3,'p_expression_za2id','calclex.py',145),
  ('expression -> expression NA9IS term','expression',3,'p_expression_na9is','calclex.py',149),
  ('expression -> term','expression',1,'p_expression_term','calclex.py',153),
  ('term -> term DERB factor','term',3,'p_term_derb','calclex.py',158),
  ('term -> term 9ISMA factor','term',3,'p_term_9isma','calclex.py',162),
  ('term -> factor','term',1,'p_term_factor','calclex.py',166),
  ('factor -> 3ADAD','factor',1,'p_factor_3adad','calclex.py',173),
  ('factor -> 9AWSLISSER expression 9AWSLIMEN','factor',3,'p_factor_expr','calclex.py',179),
  ('empty -> <empty>','empty',0,'p_empty','calclex.py',188),
  ('expression -> NA9IS expression','expression',2,'p_expr_uminus','calclex.py',199),
]
